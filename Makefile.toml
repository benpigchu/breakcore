[config]


[env]
RELEASE = { source = "${CARGO_MAKE_PROFILE}", default_value = "false", mapping = {release = "true"} }
PROFILE_FOLDER = { source = "${CARGO_MAKE_PROFILE}", default_value = "debug", mapping = {release = "release"} }
KERNEL_ELF = "target/riscv64gc-unknown-none-elf/${PROFILE_FOLDER}/breakcore-os"
KERNEL_BIN = "${KERNEL_ELF}.bin"

[tasks.default]
workspace = false
alias = "empty"

[tasks.install-rustsbi]
workspace = false
condition = { files_not_exist = ["${CARGO_MAKE_WORKING_DIRECTORY}/bootloader/rustsbi-qemu.bin"] }
install_script = '''
mkdir -p bootloader
echo Installing RustSBI...
curl -L https://github.com/rcore-os/rCore-Tutorial-v3/raw/dev/bootloader/rustsbi-qemu.bin --output bootloader/rustsbi-qemu.bin
'''

[tasks.just-run]
workspace = false
script = '''
echo ${KERNEL_BIN}
qemu-system-riscv64 \
	-machine virt \
	-nographic \
	-bios bootloader/rustsbi-qemu.bin \
	-device loader,file=${KERNEL_BIN},addr=0x80020000
'''
dependencies = ["install-rustsbi"]

[tasks.run]
workspace = false
run_task = "just-run"
dependencies = ["install-rustsbi","kernel"]

[tasks.kernel]
workspace = false
script = '''
rust-objcopy --binary-architecture=riscv64  \
	${KERNEL_ELF} \
	--strip-all -O binary \
	${KERNEL_BIN}
'''
dependencies = ["user","build-kernel"]


[tasks.user]
workspace = false
script = '''
for f in user/src/bin/*.rs
do
	name=$(echo $f|sed 's/^user\/src\/bin\///;s/\.rs$//')
	elf="target/riscv64gc-unknown-none-elf/${PROFILE_FOLDER}/$name"
	bin="$elf.bin"
	dest_elf="target/riscv64gc-unknown-none-elf/$name"
	dest_bin="$dest_elf.bin"
	echo $elf "->" $bin
	rust-objcopy --binary-architecture=riscv64  \
		$elf \
		--strip-all -O binary \
		$bin
	cp $bin $dest_bin
done
'''
dependencies = ["build-user"]

[tasks.build-kernel]
workspace = false
env = { CARGO_MAKE_WORKSPACE_INCLUDE_MEMBERS = ["os"] }
run_task = "build-crate"
dependencies = ["user"]


[tasks.build-user]
workspace = false
env = { CARGO_MAKE_WORKSPACE_INCLUDE_MEMBERS = ["user"] }
run_task = "build-crate"

[tasks.build-crate]
workspace = false
run_task = [
	{ name = "build", fork = true, condition = { env_false = ["RELEASE"] } },
	{ name = "build-release", fork = true, condition = { env_true = ["RELEASE"] } }
]

[tasks.objdump]
workspace = false
script = '''
rust-objdump --arch-name=riscv64 -x --disassemble  \
	${KERNEL_ELF}  | less
'''

[tasks.clean]
workspace = false